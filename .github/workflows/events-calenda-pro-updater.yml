name: Update Events Calendar Pro Plugin

on:
  #schedule:
  #  - cron: '0 0 * * *'  # Runs daily at midnight UTC
  workflow_dispatch:

jobs:
  check_and_update_plugin:
    runs-on: ubuntu-latest
    env:
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      WP_API_URL: "https://${{ secrets.SSH_HOST }}/wp-json/wp/v2/plugins"
      WP_USERNAME: ${{ secrets.WP_USERNAME }}
      WP_APPLICATION_PASSWORD: ${{ secrets.WP_APPLICATION_PASSWORD }}
      PLUGIN_PATH: "/path/to/upload/"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      #- name: Setup SSH agent and environment
      #  run: |
      #    mkdir -p ~/.ssh  # Create the .ssh directory if it doesn't exist
      #    echo "${SSH_PRIVATE_KEY}" > private_key.pem
      #    chmod 600 private_key.pem
      #    eval $(ssh-agent -s)
      #    ssh-add private_key.pem
      #    echo "Host remote_host" > ~/.ssh/config
      #    echo "  HostName ${SSH_HOST}" >> ~/.ssh/config
      #    echo "  User ${SSH_USER}" >> ~/.ssh/config
      #    echo "  IdentityFile private_key.pem" >> ~/.ssh/config
      #    echo "  StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Fetch latest version from changelog
        id: fetch_version
        run: |
          latest_version=$(curl -sL "https://theeventscalendar.com/category/release-notes/events-calendar-pro/" | grep -oP 'Events Calendar Pro \K[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
          echo "Latest version: $latest_version"
          echo "LATEST_VERSION=$latest_version" >> $GITHUB_ENV

      #- name: Fetch installed plugin version using REST API
      #  id: fetch_installed_version
      #  run: |
      #    auth=$(echo -n "${WP_USERNAME}:${WP_APPLICATION_PASSWORD}" | base64)
      #    api_url="${WP_API_URL}/events-calendar-pro/events-calendar-pro"
      #    response=$(curl -s -H "Authorization: Basic $auth" "$api_url")
      #    echo "URL: $api_url"  # Debugging output to see what the API returns
      #    echo "Response from API: $response"
      #    installed_version=$(echo "$response" | jq -r '.version')
      #    if [ -z "$installed_version" ]; then
      #      echo "Error: Unable to fetch installed version. Exiting."
      #      exit 1
      #    fi
      #    echo "Installed version: $installed_version"
      #    echo "INSTALLED_VERSION=$installed_version" >> $GITHUB_ENV

      #- name: Compare versions
      #  run: |
      #    if [ "${{ env.LATEST_VERSION }}" = "${{ env.INSTALLED_VERSION }}" ]; then
      #      echo "Versions are identical."
      #    else
      #      echo "New version found: ${{ env.LATEST_VERSION }}. Proceeding with update."
      #    fi

      - name: Search for new plugin version on GitHub
        uses: actions/github-script@v6
        id: search_plugin
        with:
          script: |
            const query = encodeURIComponent(`language:php Plugin Name: The Events Calendar Pro Version: ${process.env.LATEST_VERSION}`);
            console.log(query);
            const response = await github.rest.search.code({
              q: query
            });
            console.log(response);
            const repoUrl = response.data.items.length > 0 ? response.data.items[0].repository.html_url : null;
            if (repoUrl) {
              console.log(`Found repository: ${repoUrl}`);
              return { repo_url: repoUrl };
            } else {
              console.log("No matching version found on GitHub.");
              return { repo_url: null };
            }
          result-encoding: string
        env:
          LATEST_VERSION: ${{ env.LATEST_VERSION }}


      - name: Set REPO_URL
        if: steps.search_plugin.outputs.repo_url != ''
        run: echo "REPO_URL=${{ steps.search_plugin.outputs.repo_url }}" >> $GITHUB_ENV


      - name: Download plugin folder from GitHub
        run: |
          git clone --depth 1 "${{ env.REPO_URL }}"
          repo_name=$(basename "${{ env.REPO_URL }}")
          mv "$repo_name" events-calendar-pro

      - name: Remove PUE directory
        run: |
          if [ -d "events-calendar-pro/src/Tribe/PUE/" ]; then
            rm -rf "events-calendar-pro/src/Tribe/PUE/"
            echo "PUE directory removed."
          else
            echo "PUE directory not found, skipping removal."
          fi

      - name: Create ZIP archive
        run: |
          zip -r events-calendar-pro.zip events-calendar-pro
          echo "Plugin zipped."

      - name: Upload and install new plugin version via SSH
        run: |
          scp events-calendar-pro.zip remote_host:$PLUGIN_PATH
          ssh remote_host "unzip -o $PLUGIN_PATH/events-calendar-pro.zip -d /path/to/wordpress/wp-content/plugins/"
          echo "Plugin installed."

      - name: Cleanup
        run: |
          rm -rf events-calendar-pro events-calendar-pro.zip private_key.pem
          echo "Cleanup complete."
